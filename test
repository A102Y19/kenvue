def wait_for_update_installer_and_information():
    logging.info("Searching for 'OMP Data Change Manager' window...")

    omp_window = None
    while omp_window is None:
        try:
            windows = Desktop(backend="uia").windows()
            for win in windows:
                title = win.window_text()
                logging.info(f"Window found: {title}")
                if "OMP Data Change Manager" in title:
                    omp_window = win
                    logging.info("OMP main window found.")
                    break
        except Exception as e:
            logging.error(f"Error finding OMP window: {e}")
        time.sleep(5)

    # Wait for 'Update Installer' to appear
    logging.info("Looking for 'Update Installer' in OMP window...")
    update_installer_found = False
    attempts = 0
    max_attempts = 4
    while not update_installer_found and attempts < max_attempts:
        try:
            panes = omp_window.descendants()
            for pane in panes:
                try:
                    name = pane.element_info.name
                    text = pane.window_text()
                    if "Update Installer" in name or "Update Installer" in text:
                        logging.info(f"'Update Installer' found: {name}")
                        update_installer_found = True
                        break
                except Exception as pane_error:
                    logging.warning(f"Pane info fetch failed: {pane_error}")
        except Exception as e:
            logging.error(f"Error during Update Installer search: {e}")

        if not update_installer_found:
            attempts += 1
            logging.info("Update Installer not found yet. Retrying in 10 seconds..(Attempt {attempts}/{max_attempts})")
            time.sleep(10)
    if not update_installer_found:
        logging.info("Update Installer not found after maximum attempts. Proceeding with the next steps.")

    # Wait for 'Information' popup and handle it
    logging.info("Waiting for 'Information' popup every 60 seconds...")
    while True:
        try:
            panes = omp_window.descendants()
            for pane in panes:
                try:
                    name = pane.element_info.name
                    text = pane.window_text()
                    if "Information" in name or "Information" in text:
                        logging.info(f"'Information' popup found: {text}")
                        pyautogui.press('enter')
                        logging.info("ENTER sent to close popup.")

                        # Check for Notepad after ENTER
                        notepad_found = False
                        start_time = time.time()
                        timeout = 60

                        while time.time() - start_time < timeout:
                            windows = Desktop(backend="uia").windows()
                            for win in windows:
                                if "Notepad" in win.window_text():
                                    logging.info("Notepad window found.")
                                    notepad_found = True
                                    handle_notepad_if_opened(win)
                                    break
                            if notepad_found:
                                break
                            time.sleep(5)
                            
                        if not notepad_found:
                            logging.info("Installation completed. No Notepad found.")
                            time.sleep(60)
                        return
                except Exception as info_error:
                    logging.warning(f"Error checking Information pane: {info_error}")
                    sys.exit("Exiting script due to error in checking Information pane.")
        except Exception as e:
            logging.error(f"Error while checking for Information popup: {e}")
            sys.exit("Exiting script due to error while checking Information popup.")
        time.sleep(60)
