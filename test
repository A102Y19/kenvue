
import os
import shutil  # For moving files
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from pathlib import Path
import time
import sys  # To stop script on login failure
import zipfile
import logging



log_filename = r"\\awsusdmkfsxn01.jnj.com\mdd_qa_omp\Automation_Scripts\Atom_SPQA_Scripts\PAK\SPDEV\log" + time.strftime("%Y-%m-%d_%H-%M-%S") + ".txt"

FTP_key = os.getenv('sharecode')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler()
    ]
)

# Load Excel file
file_path = r"\\awsusdmkfsxn01.jnj.com\mdd_qa_omp\Automation_Scripts\Atom_SPQA_Scripts\PAK\SPDEV\PAK_Standard_requirement.xlsx"
df = pd.read_excel(file_path)

# Set Chrome options
options = webdriver.ChromeOptions()
options.add_argument("--log-level=3")

# Function to get the default downloads folder
def get_download_path():
    return os.path.join(os.path.expanduser("~"), "Downloads")

# Function to access FTP Path
def access_ftp(driver, url):
    logging.info(f"Accessing FTP: {url}")
    driver.get(url)
    try:
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "sharecode"))
        )
        password_input.send_keys(FTP_key) 
        password_input.send_keys(Keys.RETURN)
        logging.info("Password entered, waiting for login response...")
        time.sleep(5)

        # Check if authentication failed
        page_source = driver.page_source.lower()
        if "authentication failed" in page_source or "invalid password" in page_source:
            logging.info("Login Failed! Check password or FTP URL.")
            driver.quit()
            sys.exit("Stopping script due to FTP login failure.")

        logging.info("FTP Login Successful!")
    except Exception as e:
        logging.error(f"Unexpected Error in FTP Login: {e}")
        driver.quit()
        sys.exit("Stopping script due to unexpected FTP login error.")
    time.sleep(5)

# Function to open PAK File Path
def access_PAK_filepath(driver, url):
    logging.info(f"Opening PAK File Path: {url}")
    driver.execute_script("window.open('');")
    time.sleep(2)
    driver.switch_to.window(driver.window_handles[-1])
    driver.get(url)
    logging.info("Successfully opened PAK file path.")
    time.sleep(5)
    try:
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "sharecode"))
        )
        password_input.send_keys(FTP_key)  # Hardcoded password
        password_input.send_keys(Keys.RETURN)
        logging.info("Password entered, waiting for login response...")
        time.sleep(5)
        
        page_source = driver.page_source.lower()
        if "authentication failed" in page_source or "invalid password" in page_source:
            logging.info("Login Failed! Check password or FTP URL.")
            driver.quit()
            sys.exit("Stopping script due to FTP login failure.")

        logging.info("FTP Login Successful!")
    except Exception as e:
        logging.error(f"Unexpected Error in FTP Login: {e}")
        driver.quit()
        sys.exit("Stopping script due to unexpected FTP login error.")
    time.sleep(5)

# Function to download PAK file
def download_PAK_file(driver, file_name):
    logging.info(f" Searching for file: {file_name} to download...")
    
    try:
        file_element = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//span[@role='gridcell' and @aria-labelledby='genfilename' and text()='{file_name}']")
            )
        )
        driver.execute_script("arguments[0].click();", file_element)
        logging.info(f" File '{file_name}' selected, opening preview...")

        # Wait for the file preview to load
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//i[contains(@class, 'fa-download')]")
        ))

        # Click the actual Download button
        download_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, f"//span[text()='{file_name}']//following::i[contains(@class, 'fa-download')][1]"))
        )
        driver.execute_script("arguments[0].click();", download_button)
        logging.info(f" Download initiated for file: '{file_name}'")

        # Wait and confirm file is downloaded
        download_path = get_download_path()
        download_file_path = os.path.join(download_path, file_name)
        timeout = 30

        while timeout > 0:
            if os.path.exists(download_file_path):
                logging.info(f" Download confirmed: '{file_name}' is in {download_path}")
                return download_file_path  # Returning the file path
            time.sleep(30)
            timeout -= 1

        logging.info(f" Download failed: '{file_name}' not found in {download_path} after waiting.")
        return None

    except Exception as e:
        logging.info(f" Error: Unable to download file '{file_name}' - {e}")
        sys.exit("Unable to Download file check filename")

def create_folder(input_value):
    try:
        base_path, folder_name = [x.strip() for x in input_value.split(",", 1)]
        full_path = os.path.join(base_path, folder_name)

        if not os.path.exists(full_path):
            os.makedirs(full_path)
            logging.info(f" Folder created: {full_path}")
        else:
            logging.info(f" Folder already exists: {full_path}")

    except ValueError:
        logging.info(f" Invalid input format for folder creation: '{input_value}'")
        logging.info("    Format should be: 'C:\\Path, FolderName'")
    except Exception as e:
        logging.error(f" Error creating folder: {e}")

def update_project_release(file_path, new_value):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()

        updated_lines = []
        found = False
        for line in lines:
            if line.startswith("OM_PROJECTRELEASE="):
                updated_lines.append(f"OM_PROJECTRELEASE={new_value}\n")
                found = True
            else:
                updated_lines.append(line)

        if not found:
            logging.info(f" 'OM_PROJECTRELEASE=' not found in {file_path}")
            return False

        with open(file_path, 'w') as file:
            file.writelines(updated_lines)

        logging.info(f" Updated 'OM_PROJECTRELEASE' to '{new_value}' in {file_path}")
        return True

    except Exception as e:
        logging.info(f" Error updating .men file: {e}")
        return False


# Function to transfer the downloaded PAK file to a target folder
def transfer_PAK_file(source_file, target_path):
    """Move the downloaded file to a specific target folder."""
    destination_file = os.path.join(target_path, os.path.basename(source_file))

    try:
        if os.path.exists(source_file):
            shutil.move(source_file, destination_file)
            logging.info(f" File moved successfully to: {destination_file}")
            return True
        else:
            logging.info(f" File move failed: '{source_file}' not found")
            return False
    except Exception as e:
        logging.error(f" Error moving file '{source_file}': {e}")
        return False

def access_executable_filepath(driver, url):
    logging.info(f"Opening Executable File Path: {url}")
    driver.execute_script("window.open('');")
    time.sleep(2)
    driver.switch_to.window(driver.window_handles[-1])
    driver.get(url)
    logging.info(f"Successfully opened Executable file path: {url}")
    time.sleep(5)
    try:
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "sharecode"))
        )
        password_input.send_keys(FTP_key)  # Hardcoded password
        password_input.send_keys(Keys.RETURN)
        logging.info("Password entered, waiting for login response...")
        time.sleep(5)
        
        page_source = driver.page_source.lower()
        if "authentication failed" in page_source or "invalid password" in page_source:
            logging.info("Login Failed! Check password or FTP URL.")
            driver.quit()
            sys.exit("Stopping script due to FTP login failure.")

        logging.info("FTP Login Successful!")
    except Exception as e:
        logging.error(f"Unexpected Error in FTP Login: {e}")
        driver.quit()
        sys.exit("Stopping script due to unexpected FTP login error.")
    time.sleep(5)

# Function to download Executable file in the same Executable File Path tab
def download_executable_file(driver, file_name):
    logging.info(f" Searching for executable: {file_name} to download...")

    try:
        # Find and click on the executable file element to initiate download
        exec_element = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//span[@role='gridcell' and text()='{file_name}']")
            )
        )
        driver.execute_script("arguments[0].click();", exec_element)
        logging.info(f" Executable '{file_name}' selected for download...")

        # Wait for the download confirmation to load (implement appropriate wait as per the app)
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//i[contains(@class, 'fa-download')]"))
        )

        # Click the actual download button
        download_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, f"//span[text()='{file_name}']//following::i[contains(@class, 'fa-download')][1]"))
        )
        driver.execute_script("arguments[0].click();", download_button)
        logging.info(f" Download initiated for executable: '{file_name}'")

        # Wait and confirm file is downloaded
        download_path = get_download_path()
        download_executable_file_path = os.path.join(download_path, file_name)
        timeout = 30

        while timeout > 0:
            if os.path.exists(download_executable_file_path):
                logging.info(f" Download confirmed: '{file_name}' is in {download_path}")
                return file_name
            time.sleep(30)
            timeout -= 1

        logging.info(f" Download failed: '{file_name}' not found in {download_path} after waiting.")
        return False

    except Exception as e:
        logging.info(f" Error: Unable to download executable '{file_name}' - {e}")
        return False

def get_download_path():
    return str(Path.home() / "Downloads")

def transfer_executable_file(source_file, target_directory):
    try:
        # Validate source file name
        if not isinstance(source_file, str) or not source_file.strip():
            logging.error(f" Error: Invalid file name {source_file}. It should be a non-empty string.")
            return False

        # Build full path to Downloads folder
        user_downloads_path = get_download_path()
        source_file_path = os.path.join(user_downloads_path, source_file)

        # Check if the source file exists
        if not os.path.exists(source_file_path):
            logging.error(f" Error: Source file '{source_file_path}' not found.")
            return False

        # Create target directory if it doesn't exist
        if not os.path.exists(target_directory):
            os.makedirs(target_directory)
            logging.info(f" Created target directory: {target_directory}")

        # Construct full destination path
        destination_path = os.path.join(target_directory, source_file)

        # Move the file
        shutil.move(source_file_path, destination_path)
        logging.info(f" File moved successfully to {destination_path}")
        return True

    except Exception as e:
        logging.info(f" Transfer failed due to error: {e}")
        return False


def unzip_PAK_file(file_name, source_path):
    """Unzip the PAK file in the same transferred path."""
    if not file_name or not source_path:
        logging.info("Invalid file name or extraction path. quit")
        return False
        
    zip_file_path = os.path.join(source_path, file_name)  # ZIP file full path
    extract_path = source_path  # Extracting in the same folder

    try:
        if os.path.exists(zip_file_path):
            with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
                zip_ref.extractall(extract_path)
            logging.info(f" Extracted '{file_name}' to {extract_path}")
            return True
        else:
            logging.info(f" ZIP file not found: {zip_file_path}")
            return False
    except Exception as e:
        logging.error(f" Error extracting file '{file_name}': {e}")
        return False

def unzip_executable_file(destination_directory, file_name):
    try:
        # Build full path to the zip file
        zip_file_path = os.path.join(destination_directory, file_name)

        # Validate if file exists
        if not os.path.exists(zip_file_path):
            logging.error(f" Error: ZIP file '{zip_file_path}' not found.")
            return False

        # Extract ZIP contents
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(destination_directory)
            logging.info(f" Successfully unzipped '{file_name}' to '{destination_directory}'")

        return True

    except zipfile.BadZipFile:
        logging.error(f" Error: '{file_name}' is not a valid zip file.")
        return False
    except Exception as e:
        logging.error(f" Error unzipping file: {e}")
        return False

def copy_customer_pak_file(input_value):
    try:
        source_path, destination_path, file_name = [x.strip() for x in input_value.split(",", 2)]
        logging.info(f"source: {source_path}")
        logging.info(f" destination: {destination_path}")	
        logging.info(f"folder name: {file_name}")
        source_item = os.path.join(source_path, file_name)
        destination_item = os.path.join(destination_path, file_name)

        if not os.path.exists(source_item):
            logging.error(f"Source item not found: {source_item}")
            return False

        if not os.path.exists(destination_path):
            os.makedirs(destination_path, exist_ok=True)
            logging.info(f"Destination directory created: {destination_path}")

        # Copy file or folder
        if os.path.isdir(source_item):
            if os.path.exists(destination_item):
                shutil.rmtree(destination_item)  # clean previous copy if exists
            shutil.copytree(source_item, destination_item)
            logging.info(f"Folder copied to: {destination_item}")
        else:
            shutil.copy2(source_item, destination_item)
            logging.info(f"File copied to: {destination_item}")

        return True

    except Exception as e:
        logging.error(f"Error during file/folder copy: {e}")
        return False


# Initialize Chrome WebDriver only once
driver = webdriver.Chrome(options=options)
time.sleep(5)

# Variable to track open tabs
pak_tab_opened = False
downloaded_file_path = None
downloaded_file_name = None
downloaded_executable_file_name = None
downloaded_executable_file_path = None
transferred_executable_file_path = None

# Main processing loop
for index, row in df.iterrows():
    action = str(row["Action"]).strip().lower()
    requirement = str(row["Requirement"]).strip().upper()
    input_value = str(row["Inputs"]).strip()

    #logging.info(f"Checking action: '{action}', Requirement: '{requirement}', Input: '{input_value}'")

    if action == "access ftp path" and requirement == "Y" and input_value:
        access_ftp(driver, input_value)
    
    elif action == "access pak file path" and requirement == "Y" and input_value:
        access_PAK_filepath(driver, input_value)
        pak_tab_opened = True
    
    elif action == "download pak file" and requirement == "Y" and input_value:
        if pak_tab_opened:
            driver.switch_to.window(driver.window_handles[-1])
            downloaded_file_path = download_PAK_file(driver, input_value)
            downloaded_file_name = input_value
            if downloaded_file_path:
                logging.info(f"downloaded file: {downloaded_file_name}")
            else:
                logging.info("download failed, file not available")
        else:
            logging.info("Cannot download PAK file: PAK File Path tab is not open.")

    elif action == "create folder" and requirement == "Y" and input_value:
        create_folder(input_value)
		
    elif action == "update project release" and requirement == "Y" and input_value:
        try:
            men_file_path, release_value = [x.strip() for x in input_value.split(",", 1)]
            update_project_release(men_file_path, release_value)
        except Exception as e:
            logging.error(f" Invalid input or error in update_project_release: {e}")
    
    elif action == "transfer pak file" and requirement == "Y" and input_value:
        if downloaded_file_path:
            transfer_success = transfer_PAK_file(downloaded_file_path, input_value)
            if transfer_success:
                transferred_file_path = input_value
                logging.info(f" File transferred successfully to {transferred_file_path}.")
            else:
                logging.info(f" Transfer failed to {input_value}.")
        else:
            logging.info(" No file available to transfer.")

    elif action == "access executable file path" and requirement == "Y" and input_value:
        logging.info(f"Processing Executable File Path: {input_value}")
        access_executable_filepath(driver, input_value)
        exec_tab_opened = True
        logging.info("Finished executing access_executable_filepath()")

    elif action == "download executable file" and requirement == "Y" and input_value:
        logging.info(f"Processing Executable file download: {input_value}")
        if exec_tab_opened:
            # Ensure we are in the Executable File Path tab
            driver.switch_to.window(driver.window_handles[-1])
            downloaded_executable_file_path = download_executable_file(driver, input_value)
            downloaded_executable_file_name = input_value
            time.sleep(30)
            if downloaded_executable_file_path:
                logging.info(f"downloaded file: {downloaded_executable_file_name}")
            else:
                logging.info("Download failed, File not available")
        else:
            logging.info("Cannot download Executable file: Executable File Path tab is not open.")

    elif action == "transfer executable file" and requirement == "Y" and input_value:
        if downloaded_executable_file_path:
            transfer_success = transfer_executable_file(downloaded_executable_file_path, input_value)
            if transfer_success:
                transferred_executable_file_path = input_value
                logging.info(f" Executable File transferred successfully to {transferred_executable_file_path}.")
            else:
                logging.info(f" Transfer failed to {input_value}.")
        else:
            logging.info(" No Executable file available to transfer.")

    elif action == "unzip pak file" and requirement == "Y" and input_value:
        if not downloaded_file_name or not transferred_file_path:
            logging.info("No valid PAK file or destination path provided, terminating")
            quit

        logging.info(f"Processing unzip operation in: {transferred_file_path}")
        unzip_success = unzip_PAK_file(downloaded_file_name, transferred_file_path)  # File name & path
        if unzip_success:
            logging.info(f" Unzipping successful for '{downloaded_file_name}' in {transferred_file_path}")
        else:
            logging.info(f" Unzipping failed for '{downloaded_file_name}'")

    elif action == "unzip executable file" and requirement == "Y":
        if transferred_executable_file_path and downloaded_executable_file_name:
            unzip_success = unzip_executable_file(transferred_executable_file_path, downloaded_executable_file_name)
            if not unzip_success:
                logging.info(" Unzipping failed.")
        else:
            logging.info(" No file to unzip or target path missing.")


    elif action == "customer pak file copy" and requirement == "Y" and input_value:
        logging.info("Copy customer PAK file triggered")
        #source_path, destination_path, file_name = [x.strip() for x in input_value.split(",", 2)]
        copy_customer_pak_file(input_value)			


logging.info("All tasks completed successfully!")
