##### MAIN SECTION #####

Write-Host "[DEBUG] Reading input file..." -ForegroundColor Magenta
$data = Get-Content "\\awsusdmlfsxn01.jnj.com\opt_qa_omp_na\Automation_Scripts\Optimus_QA2_Scripts\PAK\log\servers.txt"

if (-not $data -or $data.Count -eq 0) {
    Write-Host "[ERROR] Input file empty or not found!" -ForegroundColor Red
    exit
}

Write-Host "[DEBUG] Total lines read from file: $($data.Count)" -ForegroundColor Magenta

# Parse input file into objects
$entries = @()
foreach ($line in $data) {
    if ([string]::IsNullOrWhiteSpace($line)) { continue }

    $parts      = $line -split '\s+'
    $schemSrv   = $parts[0]
    $osuser     = $parts[1]
    $machineRaw = $parts[2]
    $machine    = $machineRaw -replace '^.*\\',''   # strip domain if present
    $sessionNum = if ($parts.Count -ge 4) { $parts[3] } else { "" }

    $entries += [PSCustomObject]@{
        SCHEMATIC = $schemSrv
        OSUSER    = $osuser
        MACHINE   = $machine
        SESSION   = $sessionNum
    }
}

# Current host details
$hostMachine = $env:COMPUTERNAME
$hostOSUser  = $env:USERNAME

Write-Host "[DEBUG] Host Machine : $hostMachine" -ForegroundColor Cyan
Write-Host "[DEBUG] Host OSUSER  : $hostOSUser"  -ForegroundColor Cyan

foreach ($entry in $entries) {
    $schematic = $entry.SCHEMATIC
    $osuser    = $entry.OSUSER
    $machine   = $entry.MACHINE

    Write-Host "`n=============================" -ForegroundColor DarkGray
    Write-Host "[DEBUG] Processing MACHINE : $machine" -ForegroundColor Magenta
    Write-Host "[DEBUG] Target OSUSER      : $osuser" -ForegroundColor Cyan
    Write-Host "[DEBUG] Target SCHEMATIC   : $schematic" -ForegroundColor Cyan

    try {
        Write-Host "[DEBUG] Querying processes on $machine ..." -ForegroundColor Yellow

        # Get all processes remotely
        $procs = Get-WmiObject Win32_Process -ComputerName $machine -ErrorAction Stop

        if (-not $procs) {
            Write-Host "[DEBUG] No processes returned from $machine" -ForegroundColor Red
            continue
        }

        foreach ($p in $procs) {
            $cmd = $p.CommandLine
            # Step 1: Skip GetOwner, use username from servers.txt
            # Step 2: Check if CommandLine contains schematic (partial match)
            if ($cmd -like "*$($schematic.Split('_UTL')[0])*") {
                # Optional: check PID running under correct user name? Skip for now
                Write-Host ("[MATCH] Process '{0}' (PID: {1}) matches schematic '{2}'" -f $p.Name, $p.ProcessId, $schematic) -ForegroundColor Green

                # Kill the process remotely
                try {
                    $result = $p.Terminate()
                    if ($result.ReturnValue -eq 0) {
                        Write-Host ("[KILLED] Process {0} on {1}" -f $p.ProcessId, $machine) -ForegroundColor Red
                    } else {
                        Write-Host ("[ERROR] Failed to kill process {0} on {1}. ReturnValue: {2}" -f $p.ProcessId, $machine, $result.ReturnValue) -ForegroundColor Red
                    }
                }
                catch {
                    Write-Host ("[ERROR] Exception killing process {0} on {1}: {2}" -f $p.ProcessId, $machine, $_.Exception.Message) -ForegroundColor Red
                }
            }
        }
    }
    catch {
        Write-Host ("[ERROR] Failed to query {0}: {1}" -f $machine, $_.Exception.Message) -ForegroundColor Red
    }
}

Write-Host "`n[COMPLETED] Process scan and cleanup finished!" -ForegroundColor Cyan
